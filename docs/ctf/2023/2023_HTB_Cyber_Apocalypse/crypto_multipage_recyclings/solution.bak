
# OBSERVATIONS
'''
- Block sizes are 16
- Leak is [encrypted blocks[r], encrypted blocks[r+1]]
- Oracle is 'HTB'
'''

# MODULES
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import random, os
import binascii as ba
from output import *

# VARIABLES

# CLASSES

# FUNCTIONS
def blockify(message, size):
    return [message[i:i + size] for i in range(0, len(message), size)]

def dehex(string):
    dehexed = ""
    for i in range(0,len(string),2):
        dehexed += chr(int(string[i:i+2],16))
    return dehexed

def hex_range(start, end):
    return ['{:08X}'.format(i) for i in range(int(start, 16), int(end, 16))]


def xor(a, b):
    xord_bytes = list()
    for a_item,b_item in zip(a,b):
        for i in range(0,len(a_item),2):
            a_term,b_term = a_item[i:i+2],b_item[i:i+2]
            a_xor_b = int(a_term,16) ^ int(b_term,16)
            xord_bytes.append(hex(a_xor_b)[2:].zfill(2))
    return ''.join(xord_bytes)

# MAIN FUNCTION
def main():
    '''Break the AES ECB Mode.'''
    size = 32
    ciphertext_blocks = blockify(ct,size)
    
    print("ciphertext_blocks = \n    {}".format(ciphertext_blocks))
    print(phrases)
    
    r3,r4 = ciphertext_blocks[r],ciphertext_blocks[r+1]
    print(r3)
    
    hexed3,hexed4 = phrases[0],phrases[1]
    dh3,dh4 = dehex(hexed3),dehex(hexed4)
    print(dh3)
    print(dh4)
    print("\n")
    
    print(len(ciphertext_blocks)-2)
    
    print("ciphertext_blocks[r] =\n    {}".format(ciphertext_blocks[r]))
    print("ciphertext_blocks[r+1] = \n    {}".format(ciphertext_blocks[r+1]))
    
    ct3,ct4 = phrases[0],phrases[1]
    
    xor_r3_ct3,xor_r4_ct4 = xor([r3],[ct3]),xor([r4],[ct4])
    print(xor_r3_ct3)
    print(xor_r4_ct4)
    
    print(len(ct)/2)
    
    #Flag length is 27, pad of 4 at end.  That's 112 bytes with 7 blocks of 16 bytes each
    
    flag_with_offsets = ' H T B { ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? }'
    
    flag = flag_with_offsets*4 + "--------"
    
    print(ct)
    print(flag)
    
    flag_blocks = blockify(flag,size)

    
    for c,f in zip(ciphertext_blocks,flag_blocks):
        print("CTXT: {}\nFLAG: {}\n".format(c,f))
    

######## MAIN ########
if __name__ == '__main__':
    main()
